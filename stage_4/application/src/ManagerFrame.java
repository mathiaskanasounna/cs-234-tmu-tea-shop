package stage_4.application.src;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import stage_3.Client;
import stage_3.Employee;
import stage_3.Manager;
import stage_3.Product;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Teddy
 */
public class ManagerFrame extends JFrame {

    /**
     * Creates new form Manager
     */
    public ManagerFrame() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE );
         Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - this.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - this.getHeight()) / 2);
        this.setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        managerManagementTabbedPane = new javax.swing.JTabbedPane();
        removeManagerTab = new javax.swing.JPanel();
        txtIdRemoveManager = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        removeRemoveManagerBtn = new javax.swing.JButton();
        clearRemoveManagerBtn = new javax.swing.JButton();
        searchManagerTab = new javax.swing.JPanel();
        txtIdSearchManager = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        searchSearchManagerBtn = new javax.swing.JButton();
        clearSearchManagerBtn = new javax.swing.JButton();
        modifyManagerTab = new javax.swing.JPanel();
        findModifyManagerBtn = new javax.swing.JButton();
        txtIdModifyManager = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        txtFirstNameModifyManager = new javax.swing.JTextField();
        txtLastNameModifyManager = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        txtEmailModifyManager = new javax.swing.JTextField();
        txtPhoneModifyManager = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        txtStateModifyManager = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        txtCityModifyManager = new javax.swing.JTextField();
        txtZipModifyManager = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        saveModifyManagerBtn = new javax.swing.JButton();
        clearModifyManagerBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        activeModifyRadioButton = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        addManagerTab = new javax.swing.JPanel();
        txtIdAddManager = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        txtFirstNameAddManager = new javax.swing.JTextField();
        txtLastNameAddManger = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        txtEmailAddManager = new javax.swing.JTextField();
        txtPhoneAddManager = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtStateAddManager = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        txtCityAddManager = new javax.swing.JTextField();
        txtZipAddManager = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        saveAddManagerBtn = new javax.swing.JButton();
        clearAddManagerBtn = new javax.swing.JButton();
        jLabel53 = new javax.swing.JLabel();
        txtStreetAddManager = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        txtEmployeeIdAddManager = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtUserNameAddManager = new javax.swing.JTextField();
        listManagerPanel = new javax.swing.JPanel();
        listManagerjScrollPane = new javax.swing.JScrollPane();
        listManagerTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        managerManagementTabbedPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        managerManagementTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                managerManagementTabbedPaneStateChanged(evt);
            }
        });

        removeManagerTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel28.setText("ID Number");

        removeRemoveManagerBtn.setText("Remove");
        removeRemoveManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRemoveManagerBtnActionPerformed(evt);
            }
        });

        clearRemoveManagerBtn.setText("Clear");
        clearRemoveManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearRemoveManagerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout removeManagerTabLayout = new javax.swing.GroupLayout(removeManagerTab);
        removeManagerTab.setLayout(removeManagerTabLayout);
        removeManagerTabLayout.setHorizontalGroup(
            removeManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeManagerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel28)
                .addGap(33, 33, 33)
                .addGroup(removeManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(removeManagerTabLayout.createSequentialGroup()
                        .addComponent(txtIdRemoveManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(removeRemoveManagerBtn))
                    .addComponent(clearRemoveManagerBtn))
                .addGap(0, 404, Short.MAX_VALUE))
        );
        removeManagerTabLayout.setVerticalGroup(
            removeManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removeManagerTabLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(removeManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(txtIdRemoveManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeRemoveManagerBtn))
                .addGap(18, 18, 18)
                .addComponent(clearRemoveManagerBtn)
                .addContainerGap(384, Short.MAX_VALUE))
        );

        managerManagementTabbedPane.addTab("Remove", removeManagerTab);

        searchManagerTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchManagerTab.setPreferredSize(new Dimension(492, 231));

        jLabel52.setText("ID Number");

        searchSearchManagerBtn.setText("Search");
        searchSearchManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSearchManagerBtnActionPerformed(evt);
            }
        });

        clearSearchManagerBtn.setText("Clear");
        clearSearchManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSearchManagerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchManagerTabLayout = new javax.swing.GroupLayout(searchManagerTab);
        searchManagerTab.setLayout(searchManagerTabLayout);
        searchManagerTabLayout.setHorizontalGroup(
            searchManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchManagerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel52)
                .addGap(33, 33, 33)
                .addGroup(searchManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearSearchManagerBtn)
                    .addGroup(searchManagerTabLayout.createSequentialGroup()
                        .addComponent(txtIdSearchManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchSearchManagerBtn)))
                .addContainerGap(456, Short.MAX_VALUE))
        );
        searchManagerTabLayout.setVerticalGroup(
            searchManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchManagerTabLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(searchManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(txtIdSearchManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchSearchManagerBtn))
                .addGap(44, 44, 44)
                .addComponent(clearSearchManagerBtn)
                .addContainerGap(346, Short.MAX_VALUE))
        );

        managerManagementTabbedPane.addTab("Search", searchManagerTab);

        modifyManagerTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        findModifyManagerBtn.setText("Find");
        findModifyManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findModifyManagerBtnActionPerformed(evt);
            }
        });

        jLabel44.setText("ID Number");

        jLabel45.setText("First Name");

        jLabel46.setText("Last Name");

        jLabel47.setText("E-mail");

        jLabel48.setText("Phone Number");

        jLabel49.setText("State");

        jLabel50.setText("City");

        jLabel51.setText("Zip Code");

        saveModifyManagerBtn.setText("Update");
        saveModifyManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveModifyManagerBtnActionPerformed(evt);
            }
        });

        clearModifyManagerBtn.setText("Clear");
        clearModifyManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearModifyManagerBtnActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonGroup1.add(activeModifyRadioButton);
        activeModifyRadioButton.setText("Active");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Unactive");

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 18)); // NOI18N
        jLabel2.setText("Status");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addComponent(activeModifyRadioButton)))
                .addGap(0, 33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(activeModifyRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2)
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout modifyManagerTabLayout = new javax.swing.GroupLayout(modifyManagerTab);
        modifyManagerTab.setLayout(modifyManagerTabLayout);
        modifyManagerTabLayout.setHorizontalGroup(
            modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyManagerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyManagerTabLayout.createSequentialGroup()
                        .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(modifyManagerTabLayout.createSequentialGroup()
                                    .addComponent(jLabel45)
                                    .addGap(34, 34, 34)
                                    .addComponent(txtFirstNameModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(modifyManagerTabLayout.createSequentialGroup()
                                    .addComponent(jLabel44)
                                    .addGap(33, 33, 33)
                                    .addComponent(txtIdModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(modifyManagerTabLayout.createSequentialGroup()
                                .addComponent(jLabel46)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtLastNameModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(modifyManagerTabLayout.createSequentialGroup()
                                .addComponent(jLabel47)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtEmailModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(48, 48, 48)
                        .addComponent(findModifyManagerBtn)
                        .addContainerGap(414, Short.MAX_VALUE))
                    .addGroup(modifyManagerTabLayout.createSequentialGroup()
                        .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(modifyManagerTabLayout.createSequentialGroup()
                                .addComponent(jLabel50)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtCityModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(modifyManagerTabLayout.createSequentialGroup()
                                .addComponent(jLabel49)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtStateModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(modifyManagerTabLayout.createSequentialGroup()
                                .addComponent(jLabel48)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPhoneModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyManagerTabLayout.createSequentialGroup()
                                .addComponent(jLabel51)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtZipModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(clearModifyManagerBtn))))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(modifyManagerTabLayout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addComponent(saveModifyManagerBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        modifyManagerTabLayout.setVerticalGroup(
            modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyManagerTabLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(txtIdModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findModifyManagerBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(txtFirstNameModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(txtLastNameModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(txtEmailModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(txtPhoneModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49)
                    .addComponent(txtStateModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(txtCityModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(txtZipModifyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(modifyManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveModifyManagerBtn)
                    .addComponent(clearModifyManagerBtn))
                .addGap(17, 17, 17))
        );

        managerManagementTabbedPane.addTab("Modify", modifyManagerTab);

        addManagerTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel36.setText("ID Number");

        jLabel37.setText("First Name");

        jLabel38.setText("Last Name");

        jLabel39.setText("E-mail");

        jLabel40.setText("Phone Number");

        jLabel41.setText("State");

        jLabel42.setText("City");

        jLabel43.setText("Zip Code");

        saveAddManagerBtn.setText("Save");
        saveAddManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAddManagerBtnActionPerformed(evt);
            }
        });

        clearAddManagerBtn.setText("Clear");
        clearAddManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAddManagerBtnActionPerformed(evt);
            }
        });

        jLabel53.setText("Street Address");

        jLabel54.setText("Employee ID");

        jLabel3.setText("User Name");

        javax.swing.GroupLayout addManagerTabLayout = new javax.swing.GroupLayout(addManagerTab);
        addManagerTab.setLayout(addManagerTabLayout);
        addManagerTabLayout.setHorizontalGroup(
            addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addManagerTabLayout.createSequentialGroup()
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addManagerTabLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(clearAddManagerBtn))
                    .addGroup(addManagerTabLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel54)
                            .addGroup(addManagerTabLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel53, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(jLabel42)
                                    .addComponent(jLabel43)
                                    .addComponent(jLabel41)
                                    .addComponent(jLabel36)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel38)
                                    .addComponent(jLabel39)
                                    .addComponent(jLabel40))))))
                .addGap(56, 56, 56)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEmployeeIdAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtFirstNameAddManager, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtIdAddManager, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtLastNameAddManger, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtEmailAddManager, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPhoneAddManager, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtStateAddManager, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtCityAddManager)
                        .addComponent(txtZipAddManager, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtStreetAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveAddManagerBtn)
                    .addComponent(txtUserNameAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(393, Short.MAX_VALUE))
        );
        addManagerTabLayout.setVerticalGroup(
            addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addManagerTabLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtIdAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(txtFirstNameAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(txtLastNameAddManger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(txtEmailAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(txtPhoneAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmployeeIdAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54))
                .addGap(9, 9, 9)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(txtStreetAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStateAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCityAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZipAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtUserNameAddManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(addManagerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearAddManagerBtn)
                    .addComponent(saveAddManagerBtn))
                .addGap(19, 19, 19))
        );

        managerManagementTabbedPane.addTab("Add", addManagerTab);

        listManagerTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "firstName", "lastName", "email", "streetAddress", "city", "zipCode", "state", "telephone", "employeeId", "hireDate", "leaveDate", "employeeStatus", "userName", "managerId"
            }
        ));
        listManagerjScrollPane.setViewportView(listManagerTable);

        javax.swing.GroupLayout listManagerPanelLayout = new javax.swing.GroupLayout(listManagerPanel);
        listManagerPanel.setLayout(listManagerPanelLayout);
        listManagerPanelLayout.setHorizontalGroup(
            listManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listManagerPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(listManagerjScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                .addContainerGap())
        );
        listManagerPanelLayout.setVerticalGroup(
            listManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listManagerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listManagerjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        managerManagementTabbedPane.addTab("List of Manager", listManagerPanel);

        getContentPane().add(managerManagementTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 770, 500));

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 36)); // NOI18N
        jLabel1.setText("Manager");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearRemoveManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearRemoveManagerBtnActionPerformed
        // TODO add your handling code here:
        txtIdRemoveManager.setText("");
    }//GEN-LAST:event_clearRemoveManagerBtnActionPerformed
private ArrayList<Manager> getManagerFromFile(String srcdatamanagercsv) throws FileNotFoundException, IOException {
     ArrayList<Manager> managers = new ArrayList<>();
        // File path is passed as parameter
        File file = new File(srcdatamanagercsv);
        BufferedReader br = new BufferedReader(new FileReader(file));
     // Declaring a string variable
        String st;
        // Condition holds true till
        // there is character in a string
        br.readLine();
        while ((st = br.readLine()) != null) // Print the string
        {
            //firstName,lastName,email,streetAddress,city,zipCode,state,telephone,sales_id,clientId
            String data[] = st.split(",");
            System.out.println("ArraySize " + data.length);
            
            Employee employee = new Employee(data[0], data[1], data[2], data[3], data[4],
                    data[5], data[6], data[7], data[8], LocalDate.parse(data[9]), LocalDate.parse(data[10]), data[11], data[12]);
            Manager manager = new Manager(employee);
            manager.setManagerId(data[13]);
            managers.add(manager);
        }
        return managers;
    }
    private boolean findManagerID(ArrayList<Manager> managers, String manager_id) {
        for (Manager manager : managers) {
            if (manager.getManagerId().equals(manager_id)) {
                System.out.println("Find the manager");
                return true;
            }
        }
        System.out.println("Did not find the manager");
        return false;
    }
    private Manager findManagerDetails(ArrayList<Manager> managers, String manager_id) {
        for (Manager manager : managers) {
            if (manager.getManagerId().equals(manager_id)) {
                System.out.println("Find the manager");
                return manager;
            }
        }
        System.out.println("Did not find the manager");
        return null;
    }
    private boolean removeManager(ArrayList<Manager> managers, String manager_id) {
        for (int i = 0; i < managers.size(); i++) {
            if (manager_id.equals(managers.get(i).getManagerId())) {
                System.out.println("Remove the manager with ID " + manager_id);
                managers.remove(i);
                return true;
            }
        }
        System.out.println("Did not remove manager from the list");
        return false;
    }
    private void saveListOfManagers(ArrayList<Manager> managers) {
        System.out.println("Saving new manager");
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("src/data/manager.csv", false));
            writer.append("firstName,lastName,email,streetAddress,city,zipCode,state,telephone,employeeId,"
                    + "hireDate,leaveDate,employeeStatus,userName,managerId");
            for (Manager manager : managers) {
                writer.append("\n");
                writer.append(manager.getFirstName() + ",");
            writer.append(manager.getLastName() + ",");
            writer.append(manager.getEmail() + ",");
            writer.append(manager.getStreetAddress() + ",");
            writer.append(manager.getCity() + ",");
            writer.append(manager.getZipCode() + ",");
            writer.append(manager.getState() + ",");
            writer.append(manager.getTelephone() + ",");
            writer.append(manager.getEmployeeId() + ",");
            writer.append(manager.getHireDate() + ",");
            writer.append(manager.getLeaveDate() + ",");
            writer.append(manager.getEmployeeStatus() + ",");
            writer.append(manager.getUserName()+",");
            writer.append(manager.getManagerId());
           }
            writer.close();



} catch (IOException ex) {
            Logger.getLogger(ManagerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
   }
    private void clearSearchManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSearchManagerBtnActionPerformed
        // TODO add your handling code here:
        txtIdSearchManager.setText("");
    }//GEN-LAST:event_clearSearchManagerBtnActionPerformed

    private void searchSearchManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSearchManagerBtnActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            ArrayList<Manager> managers = getManagerFromFile("src/data/manager.csv");
            Manager manager = findManagerDetails(managers, txtIdSearchManager.getText());
            if (manager != null) {
                JOptionPane.showMessageDialog(this, detailsOfManager(manager));
            } else {
                JOptionPane.showMessageDialog(this, detailsOfManager(manager));
            }
        } catch (IOException ex) {
            Logger.getLogger(ProductFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchSearchManagerBtnActionPerformed

    private void clearAddManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAddManagerBtnActionPerformed
        // TODO add your handling code here:
        txtIdAddManager.setText("");
        txtFirstNameAddManager.setText("");
        txtLastNameAddManger.setText("");
        txtEmailAddManager.setText("");
        txtPhoneAddManager.setText("");
        txtStateAddManager.setText("");
        txtCityAddManager.setText("");
        txtZipAddManager.setText("");
        txtEmployeeIdAddManager.setText("");
        txtStreetAddManager.setText("");
        txtUserNameAddManager.setText("");
    }//GEN-LAST:event_clearAddManagerBtnActionPerformed

    private void saveAddManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAddManagerBtnActionPerformed
        // TODO add your handling code here:
        //         TODO add your handling code here:
        //        (String firstName, String lastName, String email, String streetAddress, String city, String zipCode, String state, String telephone,
            //            String employeeId, LocalDate hireDate, LocalDate leaveDate, String employeeStatus, String userName) {
            Employee employee = new Employee(txtFirstNameAddManager.getText(), txtLastNameAddManger.getText(), txtEmailAddManager.getText(),
                txtStreetAddManager.getText(), txtCityAddManager.getText(), txtZipAddManager.getText(), txtStateAddManager.getText(),
                txtPhoneAddManager.getText(), txtEmployeeIdAddManager.getText(), LocalDate.now(), LocalDate.now(), "Active",
                    txtUserNameAddManager.getText());
            Manager manager = new Manager(employee);
            manager.setManagerId(txtIdAddManager.getText());
            saveManager(manager,true);
    }//GEN-LAST:event_saveAddManagerBtnActionPerformed

    private void clearModifyManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearModifyManagerBtnActionPerformed
        // TODO add your handling code here:
        txtIdModifyManager.setText("");
        txtFirstNameModifyManager.setText("");
        txtLastNameModifyManager.setText("");
        txtEmailModifyManager.setText("");
        txtPhoneModifyManager.setText("");
        txtStateModifyManager.setText("");
        txtCityModifyManager.setText("");
        txtZipModifyManager.setText("");
    }//GEN-LAST:event_clearModifyManagerBtnActionPerformed

    private void findModifyManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findModifyManagerBtnActionPerformed
        try {
            // TODO add your handling code here:
            ArrayList<Manager> managers = getManagerFromFile("src/data/manager.csv");
            Manager manager = findMangerDetails(managers, txtIdModifyManager.getText());
            if (manager != null) {
                
                this.txtFirstNameModifyManager.setText(manager.getFirstName());
                this.txtLastNameModifyManager.setText(manager.getLastName());
                this.txtEmailModifyManager.setText(manager.getLastName());
                this.txtPhoneModifyManager.setText(manager.getTelephone());
                this.txtStateModifyManager.setText(manager.getState());
                this.txtCityModifyManager.setText(manager.getCity());
                this.txtZipModifyManager.setText(manager.getZipCode());
            } else {
                JOptionPane.showMessageDialog(this, "The Manager Does not exist");
            }
        } catch (IOException ex) {
            Logger.getLogger(EmployeeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_findModifyManagerBtnActionPerformed

    private void managerManagementTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_managerManagementTabbedPaneStateChanged
        // TODO add your handling code here:
        int selectTab = managerManagementTabbedPane.getSelectedIndex();
        if (selectTab == 4) {
            addRowToJTable();
        }
    }//GEN-LAST:event_managerManagementTabbedPaneStateChanged

    private void saveModifyManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveModifyManagerBtnActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            String manager_id = txtIdModifyManager.getText();
            ArrayList<Manager> managers = getManagerFromFile("src/data/manager.csv");
            Manager manager = findManagerDetails(managers, manager_id);
            manager.setFirstName(txtFirstNameModifyManager.getText());
                manager.setLastName(txtLastNameModifyManager.getText());
                manager.setEmail(txtEmailModifyManager.getText());
                manager.setTelephone(txtPhoneModifyManager.getText());
                manager.setState(txtStateModifyManager.getText());
                manager.setCity(txtCityModifyManager.getText());
                manager.setZipCode(txtZipModifyManager.getText());
                if(activeModifyRadioButton.isSelected()){
                    manager.setEmployeeStatus("Active");
                }
                else{
                    manager.setEmployeeStatus("Unactive");
                }
            if (findManagerID(managers, manager_id)) {
                UpdateManager(managers, manager);
                saveListOfManagers(managers);
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, the client does not exist");
            }
        } catch (IOException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveModifyManagerBtnActionPerformed

    private void removeRemoveManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRemoveManagerBtnActionPerformed
        // TODO add your handling code here:
         try {
            // TODO add your handling code here:
            String manager_id = txtIdRemoveManager.getText();
            ArrayList<Manager> managers = getManagerFromFile("src/data/manager.csv");
            if (findManagerID(managers, manager_id)) {
                removeManager(managers, manager_id);
                saveListOfManagers(managers);
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, the manager does not exist");
            }
        } catch (IOException ex) {
            Logger.getLogger(ManagerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_removeRemoveManagerBtnActionPerformed

public void addRowToJTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) listManagerTable.getModel();
            ArrayList<Manager> list = getManagerFromFile("src/data/manager.csv");
            Object rowData[] = new Object[14];
            for (int i = 0; i < list.size(); i++) {
                //firstName,lastName,email,streetAddress,city,zipCode,state,
                //telephone,employeeId,hireDate,leaveDate,employeeStatus,userName,managerId
                rowData[0] = list.get(i).getFirstName();
                rowData[1] = list.get(i).getLastName();
                rowData[2] = list.get(i).getEmail();
                rowData[3] = list.get(i).getStreetAddress();
                rowData[4] = list.get(i).getCity();
                rowData[5] = list.get(i).getZipCode();
                rowData[6] = list.get(i).getState();
                rowData[7] = list.get(i).getTelephone();
                rowData[8] = list.get(i).getEmployeeId();
                rowData[9] = list.get(i).getHireDate();
                rowData[10] = list.get(i).getLeaveDate();
                rowData[11] = list.get(i).getEmployeeStatus();
                rowData[12] = list.get(i).getUserName();
                rowData[13] = list.get(i).getManagerId();
           

              model.addRow(rowData);
            } 
            } catch (IOException ex) {
            Logger.getLogger(ManagerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton activeModifyRadioButton;
    private javax.swing.JPanel addManagerTab;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearAddManagerBtn;
    private javax.swing.JButton clearModifyManagerBtn;
    private javax.swing.JButton clearRemoveManagerBtn;
    private javax.swing.JButton clearSearchManagerBtn;
    private javax.swing.JButton findModifyManagerBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JPanel listManagerPanel;
    private javax.swing.JTable listManagerTable;
    private javax.swing.JScrollPane listManagerjScrollPane;
    private javax.swing.JTabbedPane managerManagementTabbedPane;
    private javax.swing.JPanel modifyManagerTab;
    private javax.swing.JPanel removeManagerTab;
    private javax.swing.JButton removeRemoveManagerBtn;
    private javax.swing.JButton saveAddManagerBtn;
    private javax.swing.JButton saveModifyManagerBtn;
    private javax.swing.JPanel searchManagerTab;
    private javax.swing.JButton searchSearchManagerBtn;
    private javax.swing.JTextField txtCityAddManager;
    private javax.swing.JTextField txtCityModifyManager;
    private javax.swing.JTextField txtEmailAddManager;
    private javax.swing.JTextField txtEmailModifyManager;
    private javax.swing.JTextField txtEmployeeIdAddManager;
    private javax.swing.JTextField txtFirstNameAddManager;
    private javax.swing.JTextField txtFirstNameModifyManager;
    private javax.swing.JTextField txtIdAddManager;
    private javax.swing.JTextField txtIdModifyManager;
    private javax.swing.JTextField txtIdRemoveManager;
    private javax.swing.JTextField txtIdSearchManager;
    private javax.swing.JTextField txtLastNameAddManger;
    private javax.swing.JTextField txtLastNameModifyManager;
    private javax.swing.JTextField txtPhoneAddManager;
    private javax.swing.JTextField txtPhoneModifyManager;
    private javax.swing.JTextField txtStateAddManager;
    private javax.swing.JTextField txtStateModifyManager;
    private javax.swing.JTextField txtStreetAddManager;
    private javax.swing.JTextField txtUserNameAddManager;
    private javax.swing.JTextField txtZipAddManager;
    private javax.swing.JTextField txtZipModifyManager;
    // End of variables declaration//GEN-END:variables

    private String detailsOfManager(Manager manager) {
    if (manager != null) {
            String result = "Here are detail of the manager : \n";
            result = result + "Manager ID : " + manager.getManagerId() + "\n Manager Fist Name : " + manager.getFirstName()
                    + "\nManager Last Name" + manager.getLastName()
                    + "\nManager Email" + manager.getEmail()
                    + "\nManager Telephone" + manager.getTelephone();
            return result;
        } else {
            return "The Manager does not exist";
        }
    }   

    private void saveManager(Manager manager, boolean mode) {
        System.out.println("Saving new employee");
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("src/data/manager.csv", mode));
            if (mode == false) {
                writer.append("firstName,lastName,email,streetAddress,city,zipCode,state,"
                        + "telephone,employeeId,hireDate,leaveDate,employeeStatus,userName,managerId");
            }
            writer.append("\n");
            writer.append(manager.getFirstName() + ",");
            writer.append(manager.getLastName() + ",");
            writer.append(manager.getEmail() + ",");
            writer.append(manager.getStreetAddress() + ",");
            writer.append(manager.getCity() + ",");
            writer.append(manager.getZipCode() + ",");
            writer.append(manager.getState() + ",");
            writer.append(manager.getTelephone() + ",");
            writer.append(manager.getEmployeeId() + ",");
            writer.append(manager.getHireDate() + ",");
            writer.append(manager.getLeaveDate() + ",");
            writer.append(manager.getEmployeeStatus() + ",");
            writer.append(manager.getUserName()+",");
            writer.append(manager.getManagerId());

            writer.close();

        } catch (IOException ex) {
            Logger.getLogger(EmployeeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Manager findMangerDetails(ArrayList<Manager> managers, String manager_id) {
        
        for (Manager manager : managers) {
            if (manager.getManagerId().equals(manager_id)) {
                System.out.println("Find the Manager");
                return manager;
            }
        }
        System.out.println("Did not find the manager");
        return null;
    
    }

    private void UpdateManager(ArrayList<Manager> managers, Manager manager) {
        
        for (Manager elt:managers) {
            if (manager.getManagerId().equals(elt.getManagerId())) {
                System.out.println("Update the Manager with ID " + manager.getManagerId());
                elt= manager;
                
            }
        }
        System.out.println("Completed from the list");
    }
}
